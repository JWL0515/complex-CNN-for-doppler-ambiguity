class ComplexNet(nn.Module):

    def __init__(self):
        super(ComplexNet, self).__init__()
        self.conv1 = ComplexConv2d(3, 50, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        self.bn1 = NaiveComplexBatchNorm2d(50, track_running_stats=False)
        self.conv2 = Conv2d(50, 100, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        self.bn2 = BatchNorm2d(100, track_running_stats=False)
        
        self.conv3 = Conv2d(100, 50, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0))
        self.bn3 = BatchNorm2d(50, track_running_stats=False)
        self.conv4 = Conv2d(50, 4, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0))
        self.bn4 = BatchNorm2d(4, track_running_stats=False)
        self.conv5 = Conv2d(24, 4, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0))

    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = complex_relu(x)
        x = complex_max_pool2d(x, kernel_size=(3, 3), stride=(4, 4))
        
        x_igm_copy = x.imag.clone()
        x_igm_copy[x_igm_copy == 0] = 1
        x = torch.mul(abs(x), x_igm_copy / abs(x_igm_copy))
        
        x = self.conv2(x)
        x = self.bn2(x)
        x = relu(x)
        x = max_pool2d(x, kernel_size=(5, 6), stride=(4, 4))
        
        x = self.conv3(x)
        x = self.bn3(x)
        x = relu(x)
        x = self.conv4(x)
        x = self.bn4(x)
        x = relu(x)
        x = x.view(x.shape[0],24, 1, 1)
        x = self.conv5(x)
        x = x.view(x.shape[0],4) 
        
        return x