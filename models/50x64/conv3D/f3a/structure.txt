class ComplexNet(nn.Module):

    def __init__(self):
        super(ComplexNet, self).__init__()
        self.conv1 = ComplexConv3d(1, 50, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.bn1 = NaiveComplexBatchNorm3d(50, track_running_stats=False)
        self.conv2 = Conv3d(50, 100, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.bn2 = BatchNorm3d(100, track_running_stats=False)
        self.conv3 = Conv3d(100, 50, kernel_size=(1, 1, 1), stride=(1, 1, 1), padding=(0, 0, 0))
        self.bn3 = BatchNorm3d(50, track_running_stats=False)
        self.conv4 = Conv3d(50, 4, kernel_size=(1, 1, 1), stride=(1, 1, 1), padding=(0, 0, 0))
        self.bn4 = BatchNorm3d(4, track_running_stats=False)
        self.conv5 = Conv3d(24, 4, kernel_size=(1, 1, 1), stride=(1, 1, 1), padding=(0, 0, 0))


    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = complex_relu(x)
        x = complex_max_pool3d(x, kernel_size=(2, 3, 3), stride=(1, 4, 4))
        
        x_igm_copy = x.imag.clone()
        x_igm_copy[x_igm_copy == 0] = 1
        x = torch.mul(abs(x), x_igm_copy / abs(x_igm_copy))

        x = self.conv2(x)
        x = self.bn2(x)
        x = relu(x)
        x = max_pool3d(x, kernel_size=(2, 5, 6), stride=(1, 4, 4))

        x = self.conv3(x)
        x = self.bn3(x)
        x = relu(x)
        x = self.conv4(x)
        x = self.bn4(x)
        x = relu(x)
        x = x.view(x.shape[0],24, 1, 1, 1)
        x = self.conv5(x)
        x = x.view(x.shape[0],4) 
        
        return x